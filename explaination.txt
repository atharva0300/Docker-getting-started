1. First, create an empty dockerfile inside app using -> touch Dockerfile
2. Build the docker container image
3. Logging inside the docker : docker login
4. Creating a repo ( public repo ) on the Dockerhub and then we will push the local docker image , 
on the dockerhub
5. Use the command : docker tag docker-getting-started USERNAME/docker-getting-started
        -> docker tag DOCKER-REPO-NAME USERNAME/DOCKER-REPO-NAME
6. building the docker image locally -> docker build -t docker-getting-started
    -> docker build -t DOCKER-REPO-NAME
7. running the image locally on localhost:3000s -> docker run -dp 3000:3000 docker-getting-started
    -> docker run -dp 3000:3000 DOCKER-REPO-NAME
8. If the running gives an error, then make sure you remove the previous images running on the same port. 
    -> Go to docker desktop -> containers -> remove them
    -> doker CLI 
        -> docker ps
        -> docker rm -f <id>
9. configuring docker login : 
    -> generate a gpg key ( for a new login only ) : gpg --generate-key
    -> pass init GPG-KEY
    -> initialize a passphrase 
    -> done!
    -> docker login 
10. Running the docker app -> docker run -dp 3000:3000 YOUR-USER-NAME/getting-started
    -> docker run -dp 3000:3000 atharva0300/docker-getting-started
    -> Select on the 3000 badge when it comes up and you should see the app with your modifications. If the 3000 badge doesn’t show up, you can select on the Open Port button and type in 3000.
11. Start an ubuntu container that will create a file named /data.txt with a random number between 1 and 10000.
    -> docker run -d ubuntu bash -c "shuf -i 1-10000 -n 1 -o /data.txt && tail -f /dev/null"
12. Read the contents of the data.txt file 
    -> CLI 
        -> On the command line, use the docker exec command to access the container. You need to get the container’s ID (use docker ps to get it). In your Mac or Linux terminal, or in Windows Command Prompt or PowerShell, get the content with the following command.
        -> docker exec <container-id> cat /data.txt
    -> Docker Desktop 
        -> containers -> click on the three dots next to the container with the ubuntu image 
        -> click 'run on terminal'
        -> cat /data.txt

13. Now, start another ubuntu container (the same image) and you’ll see you don’t have the same file. In your Mac or Linux terminal, or in Windows Command Prompt or PowerShell, get the content with the following command.
    -> docker run -it ubuntu ls /
14. Create a volume by using the docker volume create command.
    -> docker volume create todo-db
15. Start the todo app container, but add the --mount option to specify a volume mount. Give the volume a name, and mount it to /etc/todos in the container, which captures all files created at the path.
    -> docker run -dp 3000:3000 --mount type=volume,src=todo-db,target=/etc/todos getting-started

    -> NOTE : Before that 
        -> Stop and remove the todo app container once again in the Dashboard (or with docker rm -f <id>), as it is still running without using the persistent volume.
16. A lot of people frequently ask “Where is Docker storing my data when I use a volume?” If you want to know, you can use the docker volume inspect command.
    -> docker volume inspect todo-db
    -> The Mountpoint is the actual location of the data on the disk. Note that on most machines, you will need to have root access to access this directory from the host. But, that’s where it is.
17. Trying out bind mounts : 
    -> Run the following command to start bash in an ubuntu container with a bind mount.
    -> docker run -it --mount type=bind,src="$(pwd)",target=/src ubuntu bash
